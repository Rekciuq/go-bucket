// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/Rekciuq/go-bucket/ent/schema"
	"github.com/Rekciuq/go-bucket/ent/url"
	"github.com/Rekciuq/go-bucket/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	urlFields := schema.Url{}.Fields()
	_ = urlFields
	// urlDescIsUsed is the schema descriptor for is_used field.
	urlDescIsUsed := urlFields[1].Descriptor()
	// url.DefaultIsUsed holds the default value on creation for the is_used field.
	url.DefaultIsUsed = urlDescIsUsed.Default.(bool)
	// urlDescIsImage is the schema descriptor for is_image field.
	urlDescIsImage := urlFields[2].Descriptor()
	// url.DefaultIsImage holds the default value on creation for the is_image field.
	url.DefaultIsImage = urlDescIsImage.Default.(bool)
	// urlDescCreatedAt is the schema descriptor for created_at field.
	urlDescCreatedAt := urlFields[3].Descriptor()
	// url.DefaultCreatedAt holds the default value on creation for the created_at field.
	url.DefaultCreatedAt = urlDescCreatedAt.Default.(func() time.Time)
	// urlDescExpiresAt is the schema descriptor for expires_at field.
	urlDescExpiresAt := urlFields[4].Descriptor()
	// url.DefaultExpiresAt holds the default value on creation for the expires_at field.
	url.DefaultExpiresAt = urlDescExpiresAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[1].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = func() func(int) error {
		validators := userDescAge.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(age int) error {
			for _, fn := range fns {
				if err := fn(age); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
